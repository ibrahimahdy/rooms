// Generated by Dagger (https://dagger.dev).
package com.ut.iot.rooms.di.components;

import com.ut.iot.rooms.Rooms;
import com.ut.iot.rooms.api.service.AuthService;
import com.ut.iot.rooms.api.service.BookingService;
import com.ut.iot.rooms.api.service.DeviceService;
import com.ut.iot.rooms.api.service.HotelService;
import com.ut.iot.rooms.db.RoomsDB;
import com.ut.iot.rooms.db.dao.BookingDao;
import com.ut.iot.rooms.db.dao.HotelDao;
import com.ut.iot.rooms.db.dao.ImageDao;
import com.ut.iot.rooms.db.dao.RoomDao;
import com.ut.iot.rooms.db.dao.RoomTypeDao;
import com.ut.iot.rooms.db.dao.UserDao;
import com.ut.iot.rooms.di.modules.ActivityBindingModule_ProvidesAuthActivity;
import com.ut.iot.rooms.di.modules.ActivityBindingModule_ProvidesBookingActivity;
import com.ut.iot.rooms.di.modules.ActivityBindingModule_ProvidesHomeActivity;
import com.ut.iot.rooms.di.modules.ActivityBindingModule_ProvidesHotelDetailActivity;
import com.ut.iot.rooms.di.modules.ActivityBindingModule_ProvidesSettingsActivity;
import com.ut.iot.rooms.di.modules.PersistenceModule;
import com.ut.iot.rooms.di.modules.PersistenceModule_BookingDaoProviderFactory;
import com.ut.iot.rooms.di.modules.PersistenceModule_DatabaseProviderFactory;
import com.ut.iot.rooms.di.modules.PersistenceModule_HotelDaoProviderFactory;
import com.ut.iot.rooms.di.modules.PersistenceModule_ProvidesStateManagerFactory;
import com.ut.iot.rooms.di.modules.PersistenceModule_RoomDaoProviderFactory;
import com.ut.iot.rooms.di.modules.PersistenceModule_RoomImageDaoProviderFactory;
import com.ut.iot.rooms.di.modules.PersistenceModule_RoomTypeDaoProviderFactory;
import com.ut.iot.rooms.di.modules.PersistenceModule_UserDaoProviderFactory;
import com.ut.iot.rooms.di.modules.RoomsNetworkModule;
import com.ut.iot.rooms.di.modules.RoomsNetworkModule_ProvidesAuthService$app_debugFactory;
import com.ut.iot.rooms.di.modules.RoomsNetworkModule_ProvidesBookingService$app_debugFactory;
import com.ut.iot.rooms.di.modules.RoomsNetworkModule_ProvidesDeviceService$app_debugFactory;
import com.ut.iot.rooms.di.modules.RoomsNetworkModule_ProvidesHotelService$app_debugFactory;
import com.ut.iot.rooms.di.modules.RoomsNetworkModule_ProvidesOkHttpClient$app_debugFactory;
import com.ut.iot.rooms.di.modules.RoomsNetworkModule_ProvidesRetrofitInterfaceForEcoRewardsAPI$app_debugFactory;
import com.ut.iot.rooms.di.modules.sub.AuthFragmentModule_ProvidesSignInFragment;
import com.ut.iot.rooms.di.modules.sub.AuthFragmentModule_ProvidesSignUpFragment;
import com.ut.iot.rooms.di.modules.sub.HomeFragmentModule_ProvidesHomeFragment;
import com.ut.iot.rooms.di.modules.sub.HomeFragmentModule_ProvidesHotelFragment;
import com.ut.iot.rooms.repo.auth.AuthRepo;
import com.ut.iot.rooms.repo.booking.BookingRepo;
import com.ut.iot.rooms.repo.device.DeviceRepo;
import com.ut.iot.rooms.repo.hotel.HotelRepo;
import com.ut.iot.rooms.state.StateManager;
import com.ut.iot.rooms.ui.BaseActivity_MembersInjector;
import com.ut.iot.rooms.ui.auth.AuthActivity;
import com.ut.iot.rooms.ui.auth.signin.SignInFragment;
import com.ut.iot.rooms.ui.auth.signin.SignInFragment_MembersInjector;
import com.ut.iot.rooms.ui.auth.signin.SignInViewModel;
import com.ut.iot.rooms.ui.auth.signup.SignUpFragment;
import com.ut.iot.rooms.ui.auth.signup.SignUpFragment_MembersInjector;
import com.ut.iot.rooms.ui.auth.signup.SignUpViewModel;
import com.ut.iot.rooms.ui.home.HomeActivity;
import com.ut.iot.rooms.ui.home.booking.BookingActivity;
import com.ut.iot.rooms.ui.home.booking.BookingActivity_MembersInjector;
import com.ut.iot.rooms.ui.home.booking.BookingViewModel;
import com.ut.iot.rooms.ui.home.home.HomeFragment;
import com.ut.iot.rooms.ui.home.home.HomeFragment_MembersInjector;
import com.ut.iot.rooms.ui.home.home.HomeViewModel;
import com.ut.iot.rooms.ui.home.hotel.HotelFragment;
import com.ut.iot.rooms.ui.home.hotel.HotelFragment_MembersInjector;
import com.ut.iot.rooms.ui.home.hotel.HotelViewModel;
import com.ut.iot.rooms.ui.home.hotel.detail.HotelDetailActivity;
import com.ut.iot.rooms.ui.home.hotel.detail.HotelDetailActivity_MembersInjector;
import com.ut.iot.rooms.ui.home.hotel.detail.HotelDetailViewModel;
import com.ut.iot.rooms.ui.settings.SettingsActivity;
import com.ut.iot.rooms.ui.settings.SettingsActivity_MembersInjector;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBindingModule_ProvidesAuthActivity.AuthActivitySubcomponent.Factory> authActivitySubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_ProvidesHomeActivity.HomeActivitySubcomponent.Factory> homeActivitySubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_ProvidesHotelDetailActivity.HotelDetailActivitySubcomponent.Factory> hotelDetailActivitySubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_ProvidesBookingActivity.BookingActivitySubcomponent.Factory> bookingActivitySubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_ProvidesSettingsActivity.SettingsActivitySubcomponent.Factory> settingsActivitySubcomponentFactoryProvider;

  private Provider<Rooms> applicationProvider;

  private Provider<StateManager> providesStateManagerProvider;

  private Provider<OkHttpClient> providesOkHttpClient$app_debugProvider;

  private Provider<Retrofit> providesRetrofitInterfaceForEcoRewardsAPI$app_debugProvider;

  private Provider<DeviceService> providesDeviceService$app_debugProvider;

  private Provider<RoomsDB> databaseProvider;

  private Provider<UserDao> userDaoProvider;

  private Provider<BookingDao> bookingDaoProvider;

  private Provider<RoomDao> roomDaoProvider;

  private Provider<RoomTypeDao> roomTypeDaoProvider;

  private Provider<ImageDao> roomImageDaoProvider;

  private Provider<HotelDao> hotelDaoProvider;

  private Provider<AuthService> providesAuthService$app_debugProvider;

  private Provider<BookingService> providesBookingService$app_debugProvider;

  private Provider<HotelService> providesHotelService$app_debugProvider;

  private DaggerAppComponent(RoomsNetworkModule roomsNetworkModuleParam,
      PersistenceModule persistenceModuleParam, Rooms applicationParam) {

    initialize(roomsNetworkModuleParam, persistenceModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(5).put(AuthActivity.class, (Provider) authActivitySubcomponentFactoryProvider).put(HomeActivity.class, (Provider) homeActivitySubcomponentFactoryProvider).put(HotelDetailActivity.class, (Provider) hotelDetailActivitySubcomponentFactoryProvider).put(BookingActivity.class, (Provider) bookingActivitySubcomponentFactoryProvider).put(SettingsActivity.class, (Provider) settingsActivitySubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final RoomsNetworkModule roomsNetworkModuleParam,
      final PersistenceModule persistenceModuleParam, final Rooms applicationParam) {
    this.authActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_ProvidesAuthActivity.AuthActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_ProvidesAuthActivity.AuthActivitySubcomponent.Factory get() {
        return new AuthActivitySubcomponentFactory();}
    };
    this.homeActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_ProvidesHomeActivity.HomeActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_ProvidesHomeActivity.HomeActivitySubcomponent.Factory get() {
        return new HomeActivitySubcomponentFactory();}
    };
    this.hotelDetailActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_ProvidesHotelDetailActivity.HotelDetailActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_ProvidesHotelDetailActivity.HotelDetailActivitySubcomponent.Factory get(
          ) {
        return new HotelDetailActivitySubcomponentFactory();}
    };
    this.bookingActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_ProvidesBookingActivity.BookingActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_ProvidesBookingActivity.BookingActivitySubcomponent.Factory get(
          ) {
        return new BookingActivitySubcomponentFactory();}
    };
    this.settingsActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_ProvidesSettingsActivity.SettingsActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_ProvidesSettingsActivity.SettingsActivitySubcomponent.Factory get(
          ) {
        return new SettingsActivitySubcomponentFactory();}
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.providesStateManagerProvider = DoubleCheck.provider(PersistenceModule_ProvidesStateManagerFactory.create(persistenceModuleParam, applicationProvider));
    this.providesOkHttpClient$app_debugProvider = DoubleCheck.provider(RoomsNetworkModule_ProvidesOkHttpClient$app_debugFactory.create(roomsNetworkModuleParam, providesStateManagerProvider));
    this.providesRetrofitInterfaceForEcoRewardsAPI$app_debugProvider = DoubleCheck.provider(RoomsNetworkModule_ProvidesRetrofitInterfaceForEcoRewardsAPI$app_debugFactory.create(roomsNetworkModuleParam, providesOkHttpClient$app_debugProvider));
    this.providesDeviceService$app_debugProvider = DoubleCheck.provider(RoomsNetworkModule_ProvidesDeviceService$app_debugFactory.create(roomsNetworkModuleParam, providesRetrofitInterfaceForEcoRewardsAPI$app_debugProvider));
    this.databaseProvider = DoubleCheck.provider(PersistenceModule_DatabaseProviderFactory.create(persistenceModuleParam, applicationProvider));
    this.userDaoProvider = DoubleCheck.provider(PersistenceModule_UserDaoProviderFactory.create(persistenceModuleParam, databaseProvider));
    this.bookingDaoProvider = DoubleCheck.provider(PersistenceModule_BookingDaoProviderFactory.create(persistenceModuleParam, databaseProvider));
    this.roomDaoProvider = DoubleCheck.provider(PersistenceModule_RoomDaoProviderFactory.create(persistenceModuleParam, databaseProvider));
    this.roomTypeDaoProvider = DoubleCheck.provider(PersistenceModule_RoomTypeDaoProviderFactory.create(persistenceModuleParam, databaseProvider));
    this.roomImageDaoProvider = DoubleCheck.provider(PersistenceModule_RoomImageDaoProviderFactory.create(persistenceModuleParam, databaseProvider));
    this.hotelDaoProvider = DoubleCheck.provider(PersistenceModule_HotelDaoProviderFactory.create(persistenceModuleParam, databaseProvider));
    this.providesAuthService$app_debugProvider = DoubleCheck.provider(RoomsNetworkModule_ProvidesAuthService$app_debugFactory.create(roomsNetworkModuleParam, providesRetrofitInterfaceForEcoRewardsAPI$app_debugProvider));
    this.providesBookingService$app_debugProvider = DoubleCheck.provider(RoomsNetworkModule_ProvidesBookingService$app_debugFactory.create(roomsNetworkModuleParam, providesRetrofitInterfaceForEcoRewardsAPI$app_debugProvider));
    this.providesHotelService$app_debugProvider = DoubleCheck.provider(RoomsNetworkModule_ProvidesHotelService$app_debugFactory.create(roomsNetworkModuleParam, providesRetrofitInterfaceForEcoRewardsAPI$app_debugProvider));
  }

  @Override
  public void inject(Rooms instance) {
    injectRooms(instance);}

  private Rooms injectRooms(Rooms instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Rooms application;

    @Override
    public Builder application(Rooms rooms) {
      this.application = Preconditions.checkNotNull(rooms);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Rooms.class);
      return new DaggerAppComponent(new RoomsNetworkModule(), new PersistenceModule(), application);
    }
  }

  private final class AuthActivitySubcomponentFactory implements ActivityBindingModule_ProvidesAuthActivity.AuthActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_ProvidesAuthActivity.AuthActivitySubcomponent create(
        AuthActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new AuthActivitySubcomponentImpl(arg0);
    }
  }

  private final class AuthActivitySubcomponentImpl implements ActivityBindingModule_ProvidesAuthActivity.AuthActivitySubcomponent {
    private Provider<AuthFragmentModule_ProvidesSignInFragment.SignInFragmentSubcomponent.Factory> signInFragmentSubcomponentFactoryProvider;

    private Provider<AuthFragmentModule_ProvidesSignUpFragment.SignUpFragmentSubcomponent.Factory> signUpFragmentSubcomponentFactoryProvider;

    private AuthActivitySubcomponentImpl(AuthActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(7).put(AuthActivity.class, (Provider) DaggerAppComponent.this.authActivitySubcomponentFactoryProvider).put(HomeActivity.class, (Provider) DaggerAppComponent.this.homeActivitySubcomponentFactoryProvider).put(HotelDetailActivity.class, (Provider) DaggerAppComponent.this.hotelDetailActivitySubcomponentFactoryProvider).put(BookingActivity.class, (Provider) DaggerAppComponent.this.bookingActivitySubcomponentFactoryProvider).put(SettingsActivity.class, (Provider) DaggerAppComponent.this.settingsActivitySubcomponentFactoryProvider).put(SignInFragment.class, (Provider) signInFragmentSubcomponentFactoryProvider).put(SignUpFragment.class, (Provider) signUpFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

    private DeviceRepo getDeviceRepo() {
      return new DeviceRepo(DaggerAppComponent.this.providesStateManagerProvider.get(), DaggerAppComponent.this.providesDeviceService$app_debugProvider.get());}

    @SuppressWarnings("unchecked")
    private void initialize(final AuthActivity arg0) {
      this.signInFragmentSubcomponentFactoryProvider = new Provider<AuthFragmentModule_ProvidesSignInFragment.SignInFragmentSubcomponent.Factory>() {
        @Override
        public AuthFragmentModule_ProvidesSignInFragment.SignInFragmentSubcomponent.Factory get() {
          return new SignInFragmentSubcomponentFactory();}
      };
      this.signUpFragmentSubcomponentFactoryProvider = new Provider<AuthFragmentModule_ProvidesSignUpFragment.SignUpFragmentSubcomponent.Factory>() {
        @Override
        public AuthFragmentModule_ProvidesSignUpFragment.SignUpFragmentSubcomponent.Factory get() {
          return new SignUpFragmentSubcomponentFactory();}
      };
    }

    @Override
    public void inject(AuthActivity arg0) {
      injectAuthActivity(arg0);}

    private AuthActivity injectAuthActivity(AuthActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectStateManager(instance, DaggerAppComponent.this.providesStateManagerProvider.get());
      BaseActivity_MembersInjector.injectDeviceRepo(instance, getDeviceRepo());
      return instance;
    }

    private final class SignInFragmentSubcomponentFactory implements AuthFragmentModule_ProvidesSignInFragment.SignInFragmentSubcomponent.Factory {
      @Override
      public AuthFragmentModule_ProvidesSignInFragment.SignInFragmentSubcomponent create(
          SignInFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SignInFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SignInFragmentSubcomponentImpl implements AuthFragmentModule_ProvidesSignInFragment.SignInFragmentSubcomponent {
      private SignInFragmentSubcomponentImpl(SignInFragment arg0) {

      }

      private AuthRepo getAuthRepo() {
        return new AuthRepo(DaggerAppComponent.this.userDaoProvider.get(), DaggerAppComponent.this.bookingDaoProvider.get(), DaggerAppComponent.this.roomDaoProvider.get(), DaggerAppComponent.this.roomTypeDaoProvider.get(), DaggerAppComponent.this.roomImageDaoProvider.get(), DaggerAppComponent.this.hotelDaoProvider.get(), DaggerAppComponent.this.providesAuthService$app_debugProvider.get(), DaggerAppComponent.this.providesStateManagerProvider.get());}

      private SignInViewModel getSignInViewModel() {
        return new SignInViewModel(getAuthRepo());}

      @Override
      public void inject(SignInFragment arg0) {
        injectSignInFragment(arg0);}

      private SignInFragment injectSignInFragment(SignInFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, AuthActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        SignInFragment_MembersInjector.injectSignInViewModel(instance, getSignInViewModel());
        return instance;
      }
    }

    private final class SignUpFragmentSubcomponentFactory implements AuthFragmentModule_ProvidesSignUpFragment.SignUpFragmentSubcomponent.Factory {
      @Override
      public AuthFragmentModule_ProvidesSignUpFragment.SignUpFragmentSubcomponent create(
          SignUpFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SignUpFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SignUpFragmentSubcomponentImpl implements AuthFragmentModule_ProvidesSignUpFragment.SignUpFragmentSubcomponent {
      private SignUpFragmentSubcomponentImpl(SignUpFragment arg0) {

      }

      private AuthRepo getAuthRepo() {
        return new AuthRepo(DaggerAppComponent.this.userDaoProvider.get(), DaggerAppComponent.this.bookingDaoProvider.get(), DaggerAppComponent.this.roomDaoProvider.get(), DaggerAppComponent.this.roomTypeDaoProvider.get(), DaggerAppComponent.this.roomImageDaoProvider.get(), DaggerAppComponent.this.hotelDaoProvider.get(), DaggerAppComponent.this.providesAuthService$app_debugProvider.get(), DaggerAppComponent.this.providesStateManagerProvider.get());}

      private SignUpViewModel getSignUpViewModel() {
        return new SignUpViewModel(getAuthRepo());}

      @Override
      public void inject(SignUpFragment arg0) {
        injectSignUpFragment(arg0);}

      private SignUpFragment injectSignUpFragment(SignUpFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, AuthActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        SignUpFragment_MembersInjector.injectSignUpViewModel(instance, getSignUpViewModel());
        return instance;
      }
    }
  }

  private final class HomeActivitySubcomponentFactory implements ActivityBindingModule_ProvidesHomeActivity.HomeActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_ProvidesHomeActivity.HomeActivitySubcomponent create(
        HomeActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new HomeActivitySubcomponentImpl(arg0);
    }
  }

  private final class HomeActivitySubcomponentImpl implements ActivityBindingModule_ProvidesHomeActivity.HomeActivitySubcomponent {
    private Provider<HomeFragmentModule_ProvidesHomeFragment.HomeFragmentSubcomponent.Factory> homeFragmentSubcomponentFactoryProvider;

    private Provider<HomeFragmentModule_ProvidesHotelFragment.HotelFragmentSubcomponent.Factory> hotelFragmentSubcomponentFactoryProvider;

    private HomeActivitySubcomponentImpl(HomeActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(7).put(AuthActivity.class, (Provider) DaggerAppComponent.this.authActivitySubcomponentFactoryProvider).put(HomeActivity.class, (Provider) DaggerAppComponent.this.homeActivitySubcomponentFactoryProvider).put(HotelDetailActivity.class, (Provider) DaggerAppComponent.this.hotelDetailActivitySubcomponentFactoryProvider).put(BookingActivity.class, (Provider) DaggerAppComponent.this.bookingActivitySubcomponentFactoryProvider).put(SettingsActivity.class, (Provider) DaggerAppComponent.this.settingsActivitySubcomponentFactoryProvider).put(HomeFragment.class, (Provider) homeFragmentSubcomponentFactoryProvider).put(HotelFragment.class, (Provider) hotelFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

    private DeviceRepo getDeviceRepo() {
      return new DeviceRepo(DaggerAppComponent.this.providesStateManagerProvider.get(), DaggerAppComponent.this.providesDeviceService$app_debugProvider.get());}

    @SuppressWarnings("unchecked")
    private void initialize(final HomeActivity arg0) {
      this.homeFragmentSubcomponentFactoryProvider = new Provider<HomeFragmentModule_ProvidesHomeFragment.HomeFragmentSubcomponent.Factory>() {
        @Override
        public HomeFragmentModule_ProvidesHomeFragment.HomeFragmentSubcomponent.Factory get() {
          return new HomeFragmentSubcomponentFactory();}
      };
      this.hotelFragmentSubcomponentFactoryProvider = new Provider<HomeFragmentModule_ProvidesHotelFragment.HotelFragmentSubcomponent.Factory>() {
        @Override
        public HomeFragmentModule_ProvidesHotelFragment.HotelFragmentSubcomponent.Factory get() {
          return new HotelFragmentSubcomponentFactory();}
      };
    }

    @Override
    public void inject(HomeActivity arg0) {
      injectHomeActivity(arg0);}

    private HomeActivity injectHomeActivity(HomeActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectStateManager(instance, DaggerAppComponent.this.providesStateManagerProvider.get());
      BaseActivity_MembersInjector.injectDeviceRepo(instance, getDeviceRepo());
      return instance;
    }

    private final class HomeFragmentSubcomponentFactory implements HomeFragmentModule_ProvidesHomeFragment.HomeFragmentSubcomponent.Factory {
      @Override
      public HomeFragmentModule_ProvidesHomeFragment.HomeFragmentSubcomponent create(
          HomeFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new HomeFragmentSubcomponentImpl(arg0);
      }
    }

    private final class HomeFragmentSubcomponentImpl implements HomeFragmentModule_ProvidesHomeFragment.HomeFragmentSubcomponent {
      private HomeFragmentSubcomponentImpl(HomeFragment arg0) {

      }

      private BookingRepo getBookingRepo() {
        return new BookingRepo(DaggerAppComponent.this.bookingDaoProvider.get(), DaggerAppComponent.this.roomDaoProvider.get(), DaggerAppComponent.this.roomTypeDaoProvider.get(), DaggerAppComponent.this.roomImageDaoProvider.get(), DaggerAppComponent.this.providesStateManagerProvider.get(), DaggerAppComponent.this.providesBookingService$app_debugProvider.get());}

      private HomeViewModel getHomeViewModel() {
        return new HomeViewModel(getBookingRepo());}

      @Override
      public void inject(HomeFragment arg0) {
        injectHomeFragment(arg0);}

      private HomeFragment injectHomeFragment(HomeFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, HomeActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        HomeFragment_MembersInjector.injectHomeViewModel(instance, getHomeViewModel());
        return instance;
      }
    }

    private final class HotelFragmentSubcomponentFactory implements HomeFragmentModule_ProvidesHotelFragment.HotelFragmentSubcomponent.Factory {
      @Override
      public HomeFragmentModule_ProvidesHotelFragment.HotelFragmentSubcomponent create(
          HotelFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new HotelFragmentSubcomponentImpl(arg0);
      }
    }

    private final class HotelFragmentSubcomponentImpl implements HomeFragmentModule_ProvidesHotelFragment.HotelFragmentSubcomponent {
      private HotelFragmentSubcomponentImpl(HotelFragment arg0) {

      }

      private HotelRepo getHotelRepo() {
        return new HotelRepo(DaggerAppComponent.this.hotelDaoProvider.get(), DaggerAppComponent.this.providesHotelService$app_debugProvider.get());}

      private HotelViewModel getHotelViewModel() {
        return new HotelViewModel(getHotelRepo());}

      @Override
      public void inject(HotelFragment arg0) {
        injectHotelFragment(arg0);}

      private HotelFragment injectHotelFragment(HotelFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, HomeActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        HotelFragment_MembersInjector.injectHotelViewModel(instance, getHotelViewModel());
        return instance;
      }
    }
  }

  private final class HotelDetailActivitySubcomponentFactory implements ActivityBindingModule_ProvidesHotelDetailActivity.HotelDetailActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_ProvidesHotelDetailActivity.HotelDetailActivitySubcomponent create(
        HotelDetailActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new HotelDetailActivitySubcomponentImpl(arg0);
    }
  }

  private final class HotelDetailActivitySubcomponentImpl implements ActivityBindingModule_ProvidesHotelDetailActivity.HotelDetailActivitySubcomponent {
    private HotelDetailActivitySubcomponentImpl(HotelDetailActivity arg0) {

    }

    private DeviceRepo getDeviceRepo() {
      return new DeviceRepo(DaggerAppComponent.this.providesStateManagerProvider.get(), DaggerAppComponent.this.providesDeviceService$app_debugProvider.get());}

    private HotelRepo getHotelRepo() {
      return new HotelRepo(DaggerAppComponent.this.hotelDaoProvider.get(), DaggerAppComponent.this.providesHotelService$app_debugProvider.get());}

    private HotelDetailViewModel getHotelDetailViewModel() {
      return new HotelDetailViewModel(getHotelRepo());}

    @Override
    public void inject(HotelDetailActivity arg0) {
      injectHotelDetailActivity(arg0);}

    private HotelDetailActivity injectHotelDetailActivity(HotelDetailActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectStateManager(instance, DaggerAppComponent.this.providesStateManagerProvider.get());
      BaseActivity_MembersInjector.injectDeviceRepo(instance, getDeviceRepo());
      HotelDetailActivity_MembersInjector.injectHotelDetailViewModel(instance, getHotelDetailViewModel());
      return instance;
    }
  }

  private final class BookingActivitySubcomponentFactory implements ActivityBindingModule_ProvidesBookingActivity.BookingActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_ProvidesBookingActivity.BookingActivitySubcomponent create(
        BookingActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new BookingActivitySubcomponentImpl(arg0);
    }
  }

  private final class BookingActivitySubcomponentImpl implements ActivityBindingModule_ProvidesBookingActivity.BookingActivitySubcomponent {
    private BookingActivitySubcomponentImpl(BookingActivity arg0) {

    }

    private DeviceRepo getDeviceRepo() {
      return new DeviceRepo(DaggerAppComponent.this.providesStateManagerProvider.get(), DaggerAppComponent.this.providesDeviceService$app_debugProvider.get());}

    private BookingRepo getBookingRepo() {
      return new BookingRepo(DaggerAppComponent.this.bookingDaoProvider.get(), DaggerAppComponent.this.roomDaoProvider.get(), DaggerAppComponent.this.roomTypeDaoProvider.get(), DaggerAppComponent.this.roomImageDaoProvider.get(), DaggerAppComponent.this.providesStateManagerProvider.get(), DaggerAppComponent.this.providesBookingService$app_debugProvider.get());}

    private BookingViewModel getBookingViewModel() {
      return new BookingViewModel(getBookingRepo());}

    private HotelRepo getHotelRepo() {
      return new HotelRepo(DaggerAppComponent.this.hotelDaoProvider.get(), DaggerAppComponent.this.providesHotelService$app_debugProvider.get());}

    private HotelDetailViewModel getHotelDetailViewModel() {
      return new HotelDetailViewModel(getHotelRepo());}

    @Override
    public void inject(BookingActivity arg0) {
      injectBookingActivity(arg0);}

    private BookingActivity injectBookingActivity(BookingActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectStateManager(instance, DaggerAppComponent.this.providesStateManagerProvider.get());
      BaseActivity_MembersInjector.injectDeviceRepo(instance, getDeviceRepo());
      BookingActivity_MembersInjector.injectBookingViewModel(instance, getBookingViewModel());
      BookingActivity_MembersInjector.injectHotelDetailViewModel(instance, getHotelDetailViewModel());
      return instance;
    }
  }

  private final class SettingsActivitySubcomponentFactory implements ActivityBindingModule_ProvidesSettingsActivity.SettingsActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_ProvidesSettingsActivity.SettingsActivitySubcomponent create(
        SettingsActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SettingsActivitySubcomponentImpl(arg0);
    }
  }

  private final class SettingsActivitySubcomponentImpl implements ActivityBindingModule_ProvidesSettingsActivity.SettingsActivitySubcomponent {
    private SettingsActivitySubcomponentImpl(SettingsActivity arg0) {

    }

    private DeviceRepo getDeviceRepo() {
      return new DeviceRepo(DaggerAppComponent.this.providesStateManagerProvider.get(), DaggerAppComponent.this.providesDeviceService$app_debugProvider.get());}

    @Override
    public void inject(SettingsActivity arg0) {
      injectSettingsActivity(arg0);}

    private SettingsActivity injectSettingsActivity(SettingsActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      BaseActivity_MembersInjector.injectStateManager(instance, DaggerAppComponent.this.providesStateManagerProvider.get());
      BaseActivity_MembersInjector.injectDeviceRepo(instance, getDeviceRepo());
      SettingsActivity_MembersInjector.injectBookingDao(instance, DaggerAppComponent.this.bookingDaoProvider.get());
      SettingsActivity_MembersInjector.injectHotelDao(instance, DaggerAppComponent.this.hotelDaoProvider.get());
      SettingsActivity_MembersInjector.injectImageDao(instance, DaggerAppComponent.this.roomImageDaoProvider.get());
      SettingsActivity_MembersInjector.injectRoomDao(instance, DaggerAppComponent.this.roomDaoProvider.get());
      SettingsActivity_MembersInjector.injectRoomTypeDao(instance, DaggerAppComponent.this.roomTypeDaoProvider.get());
      SettingsActivity_MembersInjector.injectUserDao(instance, DaggerAppComponent.this.userDaoProvider.get());
      return instance;
    }
  }
}
